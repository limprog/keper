import logging
import sqlite3
import os
import requests

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import asyncio

import torch
import torchvision
import torchvision.transforms as transforms
from mmcls.apis import inference_model, init_model, show_result_pyplot

from telegbot.constants import *
from telegbot.states import *

url = 'http://127.0.0.1:5000'


loop = asyncio.get_event_loop()
storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)
states = States()
reg = {}
button_h1 = KeyboardButton("Mon")
button_h2 = KeyboardButton("Tue")
button_h3 = KeyboardButton("Wed")
button_h4 = KeyboardButton("Thu")
button_h5 = KeyboardButton("Fri")
button_h6 = KeyboardButton("Sat")
button_h7 = KeyboardButton("Sun")
greet_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
greet_kb.add(button_h1,button_h2, button_h3, button_h4,button_h5, button_h6,button_h7)

#await bot.send_message(message.from_user.id, "test message")


@dp.message_handler(commands=['start'])
async def comand_start(message: types.Message):
    await message.answer(ANSWER_COM_START)


@dp.message_handler(commands=["help"])
async def comand_help(message: types.Message):
    await message.answer(ANSWER_COM_HELP)


@dp.message_handler(commands=["info"])
async def comand_info(message: types.Message):
    await message.answer(ANSWER_COM_INFO)


@dp.message_handler(commands=["insaider"])
async def comand_insaider(message: types.Message):
    await message.answer(ANSWER_COM_INSADER)


@dp.message_handler(commands=['reg'])
async def comand_reg(message: types.Message, state: FSMContext):
    if not reg:
        await message.answer("–î–ª—è —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è")
        await states.name.set()
    else:
        await message.answer(f"–í –∞–∫–∫–∞—É–Ω—Ç –≤—ã–ø–æ–ª–Ω–∏–Ω –≤—Ö–æ–¥\n–í–∞—à –Ω–∏–∫–Ω–µ–π–º:")


@dp.message_handler(state=states.name)
async def comand_reg_2(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer('–î–∞–ª—å—à–µ –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º')
    await states.nickname.set()


@dp.message_handler(state=states.nickname)
async def comand_reg_3(message: types.Message, state: FSMContext):
    await state.update_data(nickname=message.text)
    await message.answer('–î–∞–ª—å—à–µ –≤–≤–µ–¥–∏—Ç–µ —Å–æ–≤—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å')
    await states.position.set()


@dp.message_handler(state=states.position)
async def comand_reg_4(message: types.Message, state: FSMContext):
    await state.update_data(position=message.text)
    await message.answer('–î–∞–ª—å—à–µ –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏', reply_markup=greet_kb)
    await states.timetable1.set()


@dp.message_handler(state=states.timetable1)
async def comand_reg_5(message: types.Message, state: FSMContext):
    await state.update_data(timetable1=message.text)
    await message.answer('–î–∞–ª—å—à–µ –≤–≤–µ–¥–∏—Ç–µ —á–∞—Å –Ω–∞—á–∞—Ä–∞ —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 13:23', reply_markup=ReplyKeyboardRemove())
    await states.timetable2.set()


@dp.message_handler(state=states.timetable2)
async def comand_reg_5(message: types.Message, state: FSMContext):
    await state.update_data(timetable2=message.text)
    await message.answer('–î–∞–ª—å—à–µ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
    await states.cod.set()


@dp.message_handler(state=states.cod)
async def comand_reg_6(message: types.Message, state: FSMContext):
    await state.update_data(cod=message.text)
    await message.answer('–ü–æ—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
    await states.rcod.set()


@dp.message_handler(state=states.rcod)
async def comand_reg_7(message: types.Message, state: FSMContext):
    await state.update_data(rcod=message.text)
    data = await state.get_data()
    if data['cod'] == data['rcod']:
        await message.answer(f'–í–∞—à–µ –∏–º—è {data["name"]} \n–í–∞—à –Ω–∏–∫–Ω–µ–π–º {data["nickname"]} \n–í–∞—à–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã{data["position"]}, \n–î–Ω–∏ —Ä–∞–±–æ—Ç—ã {data["timetable1"]}, \n–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ {data["timetable2"]}' )
        await message.answer("–í—Å–µ –ø—Ä–∞–≤–µ–ª—å–Ω–æ?")
        await states.answer.set()
    else:
        await message.answer("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç \n–ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –ø—Ä–æ–ª—è\n–Ω–∞–ø–µ—à–∏–µ –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å")
        await states.answer2.set()


@dp.message_handler(state=states.answer)
async def comand_reg_f(message: types.Message, state: FSMContext):
    await state.update_data(answer=message.text)
    data = await state.get_data()
    answer = data['answer'].strip().lower()
    if answer == "–¥–∞":
        tgid = message.from_user.id
        reg['name'] = data['name']
        reg['nickname'] = data['nickname']
        reg['position'] = data['position']
        reg['timetable'] = data['timetable1']+" "+data['timetable2']
        reg['cod'] = data["cod"]
        reg["tgid"] = tgid
        r = requests.post(url+"/reg", data=reg)
        await message.answer("–ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞")
        await state.finish()
    elif answer == "–Ω–µ—Ç":
        await message.answer("–ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞")
        await message.answer("–î–ª—è —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è")
        await states.fname.set()


@dp.message_handler(state=states.answer2)
async def comand_reg_r(message: types.Message, state: FSMContext):
    await state.update_data(answer2=message.text)

    data = await state.get_data()
    answer = data['answer2'].strip().lower()
    if sum([answer.find(i)!=-1 for i in ["–ø–æ–≤—Ç–æ—Ä–∏—Ç—å"]]):
        await message.answer("–ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞")
        await message.answer("–î–ª—è —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è")
        await states.fname.set()
    elif sum([answer.find(i)!=-1 for i in ["–ø–∞—Ä–æ–ª—å"]]):
        await message.answer("–ù–∞—á–Ω–∏—Ç–µ c –ø–æ–≤—Ç–æ—Ä–∞ –ø–∞—Ä–æ–ª—è")
        await message.answer('–ü–æ—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
        await states.rcod.set()


@dp.message_handler(commands=['auth'])
async def comand_auht_1(message: types.Message, state: FSMContext):
    if not reg:
        await message.answer("–î–ª—è –∞—É–Ω—Ç–æ—Ñ–∏–∫–∞—Ü–∏–∏ –≤–≤–µ–¥–¥–∏—Ç–µ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º")
        await states.nickname2.set()
    else:
        await message.answer(f"–í –∞–∫–∫–∞—É–Ω—Ç –≤—ã–ø–æ–ª–Ω–∏–Ω –≤—Ö–æ–¥\n–í–∞—à –Ω–∏–∫–Ω–µ–π–º: {reg['fname']}")


@dp.message_handler(state=states.nickname2)
async def comand_auht_2(message: types.Message, state: FSMContext):
    await state.update_data(nickname=message.text)
    await message.answer("–î–ª—è –∞—É–Ω—Ç–æ—Ñ–∏–∫–∞—Ü–∏–∏ –≤–≤–µ–¥–¥–∏—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å")
    await states.cod_2.set()


@dp.message_handler(state=states.cod_2)
async def comand_auht_3(message: types.Message, state: FSMContext):
    await state.update_data(cod_2=message.text)
    data = await state.get_data()




@dp.message_handler(state=states.answer3)
async def comand_auth_f(message: types.Message, state: FSMContext):
    await state.update_data(answer3=message.text)
    tgid = message.from_user.id
    data = await state.get_data()
    answer = data['answer3'].strip().lower()
    if sum([answer.find(i)!=-1 for i in ["–¥–∞"]]):
        await message.answer("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏–Ω–∞")
    elif sum([answer.find(i)!=-1 for i in ["–Ω–µ—Ç"]]):
        await message.answer("–ù–∞—á–Ω–∏—Ç–µ c –Ω–∞—á–∞–ª–∞")
        await message.answer("–î–ª—è –∞—É–Ω—Ç–æ—Ñ–∏–∫–∞—Ü–∏–∏ –≤–≤–µ–¥–¥–∏—Ç–µ —Å–≤–æ–π email")
        await states.email_2.set()


@dp.message_handler(commands=['akk'])
async def comand_akk(message: types.Message):
    await message.answer(f'–í–∞—à–µ –∏–º—è {reg["fname"]} \n–í–∞—à –Ω–∏–∫–Ω–µ–π–º {reg["sname"]} \n–í–∞—à email {reg["email"]}')


@dp.message_handler(commands=['rem'])
async def comand_akk(message: types.Message):
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∞—É–Ω—Ç–∞")
    global reg
    reg = {}

async def scrin(file, tgid, id):
    photo = InputFile(os.path.join("../server", file))
    model = torch.load(os.path.join('../net/best_scr_v3_shufflenet_v2.pth'), map_location={'cuda:0': 'cpu'})
    result = inference_model(model, os.path.join("../server", file))
    if result['pred_class'] != "Game" :
        await bot.send_photo(tgid, photo=photo)
        await bot.send_message(tgid, f"–ö–æ–º–ø—å—é—Ç–µ—Ä —Å id {id} –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–æ–π –≤ {result['pred_class']}")
        await bot.send_message(tgid, text="üòª")
    else:
        await bot.send_photo(tgid, photo=photo)
        await bot.send_message(tgid, f"–ö–æ–º–ø—å—é—Ç–µ—Ä —Å id {id}: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ {result['pred_class']}")
        await bot.send_message(tgid, text="üò≠")


if __name__ == '__main__':
    executor.start_polling(dp,  skip_updates=True)